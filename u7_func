#!/bin/bash
# REVISON:R1
# Script for U7 system function test by EFCO Sam

#For Debug
#set -xv

LOC="/home/production"
BURN_LOC="$LOC/hw_test/tools/burnintest/64bit"
CGUT_LOC="$LOC/hw_test/tools/cgutillx/cgutlcmd"
DIO_LOC="$LOC/hw_test/tools/cgoslx-x64-1.03.029/CgosI2CgpioLoopback/Lx"
IDIO_LOC="$LOC/hw_test/tools/cgoslx-x64-1.03.029/CgosI2CgpioSample/Lx"
EEUPDATE_LOC="$LOC/hw_test/tools/intel/Linux_x64/OEM_Mfg"
SERIAL_LOC="$LOC/hw_test/tools"
SCR_LOC="$LOC/hw_test"
TMP_LOC="$LOC/hw_test/tmp"
LIB_LOC="$LOC/hw_test/lib"
LOG_LOC="$LOC/u7_log"
USB30_LOC="$LOC/hw_test/tmp/usb30.tmp"


AT_LOG="$LOC/hw_test/tmp/at.tmp"
MIC_LOG="$LOC/hw_test/tmp/mic.tmp"
DIO_LOG="$LOC/hw_test/tmp/dio.tmp"
IDIO_LOG="$LOC/hw_test/tmp/idio.tmp"
BI_LOG="/tmp/bi.log"
MAC_LOG="$LOC/hw_test/tmp/mac.tmp"
MODEL_LOG="$LOC/hw_test/tmp/model.tmp"
NVM_LOG="$LOC/hw_test/tmp/nvm.tmp"
ADDR_LOG="$LOC/hw_test/tmp/addr.tmp"

#1=device(/dev/ttyUSB2) 2=at command(at+ciccid\r\n) 3=cat (ICCID)
at_check(){
	rm $AT_LOG
	sudo cat $1 | tee -a $AT_LOG &
	sleep 2
	sudo sh -c "echo '$2' > $1"
	sleep 2 # wait for response
	cat $AT_LOG | grep $3
	if [ $? = 0 ];then
		echo "****** Check AT $3 passed! ******" | tee -a $LOG_LOC/$SN_LOG.log
		sudo killall -9 cat 
        else
		echo "****** Check AT $(cat $AT_LOG | grep $3) failed! ******" | tee -a $LOG_LOC/$SN_LOG.log
		sudo killall -9 cat 
		fail_red_dialog "Check AT $(cat $AT_LOG | grep $3) failed!"
        fi
}

#input spec of $1 BI to script ex.disk/nodisk $2 is BI time
bi_cli_auto(){
	#BI_LOG=/tmp/BiTLog2.log

	rm -f $BI_LOG
	rm -f $BURN_LOC/cmdline_config.txt
	case $1 in
        	"disk")
        		cp $BURN_LOC/cmdline_config.disk $BURN_LOC/cmdline_config.txt
        		;;
        	"nodisk")
        		cp $BURN_LOC/cmdline_config.nodisk $BURN_LOC/cmdline_config.txt
        		;;
        	"noserial")
        		cp $BURN_LOC/cmdline_config.noserial $BURN_LOC/cmdline_config.txt
        		;;
       		*)
        		"Usage {disk|nodisk|}"
        		;;
	esac
	$BURN_LOC/bit_cmd_line_x64 -D $2

	RUN_T=$(($2 /60))
	BI_TIME_CHK=$(grep "Test Duration" "$BI_LOG" | cut -c 18 )
	if [ $BI_TIME_CHK = $RUN_T ]; then
		echo "****** BI time $RUN_T hour passed!, spec $2 mins! ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** BI time $RUN_T hour failed!, spec $2 mins!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "BI time $RUN_T hour failed!, spec $2 mins!"
	fi
	
	BICHK=$(grep "TEST RUN PASSED" "$BI_LOG" | cut -c 10-15 )
	if [ $BICHK = "PASSED" ]; then
		echo "****** Check Passmark BI result passed! ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check Passmark BI result failed!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check Passmark BI result failed!"
	fi
}

bi_log_check(){
 	BICHK=$(grep "TEST RUN PASSED" "$BI_LOG" | cut -c 10-15 )
        if [ $BICHK = "PASSED" ]; then
                echo "****** Check Passmark BI result passed! ******" | tee -a $LOG_LOC/$SN_LOG.log
        else
                echo "****** Check Passmark BI result failed!  ******" | tee -a $LOG_LOC/$SN_LOG.log
                bi_log_copy
		fail_red_dialog "Check Passmark BI result failed!"
        fi
}

bi_log_copy(){
	#copy bi log to SN_log
	BI_LOG=/tmp/bi.log
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo "******************************************" | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo "****** The Passmark LOG start here! ******" | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo "*******************************************" | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	echo " " | tee -a $LOG_LOC/$SN_LOG.log >/dev/null
	cat $BI_LOG >> $LOG_LOC/$SN_LOG.log
}

burnintest_script(){
	sudo rm /tmp/bi.log
	sudo $BURN_LOC/bit_gui_x64 -S $BURN_LOC/script.bits
}

bios_rev_check(){
	BIOS_REV=$(sudo $CGUT_LOC/cgutlcmd CGINFO /OT:BOARD /DUMP /BIOS | grep "System BIOS" | awk '{print $4}')
	case $BIOS_REV in
		QC31R128)
			echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
			fail_red_dialog "Check BIOS revision $BIOS_REV failed!"
			;;
		QC31R134)
			echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
			fail_red_dialog "Check BIOS revision $BIOS_REV failed!"
			;;
		QC31R912)
			echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
			;;
		QC32R128)
			echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
			fail_red_dialog "Check BIOS revision $BIOS_REV failed!"
			;;
		QC32R912)
			echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
			;;
	esac
			
}

bios_oem_update(){
	BIOS_REV=$(sudo $CGUT_LOC/cgutlcmd CGINFO /OT:BOARD /DUMP /BIOS | grep "System BIOS" | awk '{print $4}')
	echo " " | tee -a $LOG_LOC/$SN_LOG.log
	echo "****** Check BIOS Version is $BIOS_REV ******" | tee -a $LOG_LOC/$SN_LOG.log
	case $BIOS_REV in
		QC31R128)
			OEM=QC31U128
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /ADD /IF:$CGUT_LOC/$OEM.MOD
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /OEM:$OEM
			bios_oem_check $OEM
			;;
		QC31R134)
			OEM=QC31U134
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /ADD /IF:$CGUT_LOC/$OEM.MOD
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /OEM:$OEM
			bios_oem_check $OEM
			;;
		QC31R912)
			OEM=QC31U912
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /ADD /IF:$CGUT_LOC/$OEM.MOD
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /OEM:$OEM
			bios_oem_check $OEM
			;;
		QC32R912)
			OEM=QC32U912
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /ADD /IF:$CGUT_LOC/$OEM.MOD
			sudo $CGUT_LOC/cgutlcmd MODULE /OT:BOARD /OEM:$OEM
			bios_oem_check $OEM
			;;
	esac
			
}

bios_oem_check(){
	OEM_REV=$(sudo $CGUT_LOC/cgutlcmd CGINFO /OT:BOARD /DUMP /BIOS | grep OEM | awk '{print $4}')
	if [ $OEM_REV = $1 ]; then
		echo "****** Check BIOS OEM $OEM_REV passed!, spec $1 !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check BIOS OEM $OEM_REV failed!, spec $1 !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check BIOS OEM $OEM_REV failed!, spec $1 !"
	fi

}

cpu_temp_check(){
	TEMP_LOG=$TMP_LOC/temp.tmp
	rm -r $TEMP_LOG
	sensors -A | tee -a $TEMP_LOG
	CPU_TEMP_LOG=$(sensors -A |grep "Core 0" |awk '{print $3}' |cut -c 1-3)
	#SYS_TEMP_LOG=$(sensors -A |grep "temp1" |awk '{print $2}' |cut -c 1-3)
	#echo "****** Syetem temp $SYS_TEMP_LOG C !  ******" | tee -a $LOG_LOC/$SN_LOG.log

	if [ $CPU_TEMP_LOG -ge $1 ] && [ $CPU_TEMP_LOG -le $2 ];then
		echo "****** Check CPU temp $CPU_TEMP_LOG C passed!, spec $1 to  $2 C  ******" | tee -a $LOG_LOC/$SN_LOG.log	
	else
		echo "****** Check CPU temp $CPU_TEMP_LOG C failed!, spec $1 to  $2 C  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check CPU temp $CPU_TEMP_LOG C failed!, spec $1 - $2 C"
	fi
}


dio_loopback_test(){
	$DIO_LOC/cgosi2cgpioloopback > $DIO_LOG
	if [ $? = 0 ];then
		echo "****** Check DIO $(cat $DIO_LOG)  ******" | tee -a $LOG_LOC/$SN_LOG.log
        else
		echo "****** Check DIO $(cat $DIO_LOG)  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check DIO $(cat $DIO_LOG) failed!"
        fi
}

idio_loopback_test(){
	$IDIO_LOC/q715_loop > $IDIO_LOG
	GPI_CHECK=$(cat $IDIO_LOG |grep GPI |awk '{print $18}')
	if [ $GPI_CHECK = 0000 ];then
		echo "****** Check IDIO Loopback Done ******" | tee -a $LOG_LOC/$SN_LOG.log
        else
		echo "****** Check IDIO $(cat $IDIO_LOG)  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check IDIO $(cat $IDIO_LOG) failed!"
        fi
}

fail_red_dialog(){
	dialog --title  TESTING_RESULT  --colors --yesno\
	"\Zb\Z1FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL_FAIL\
	 -------------------------------------------------\
	 \Zn $1 \n\
	Esc= Back to MAIN-MENU\n Yes= Test again\n No= Power off 
	" 20 55
	#0=yes 1=no 255=Esc
	response=$?
	case $response in
		0)
		   #echo "" >> $LOG_LOC/$SN_LOG.log
	 	   echo "****** TEST_FAILED! ****** " >> $LOG_LOC/$SN_LOG.log
		   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-FAIL.log
		   usb_log_sync
		   onedrive_log_sync
		   clear
		   sh /home/production/hw_test/t.sh
		   exit
		exit 0 ;;
	        
		1) 
		   #echo "" >> $LOG_LOC/$SN_LOG.log
	 	   echo "****** TEST_FAILED! ****** " >> $LOG_LOC/$SN_LOG.log
		   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-FAIL.log
		   usb_log_sync
		   onedrive_log_sync
		   sync
		   poweroff
		exit 1 ;;
		
		255) 
		   #echo "" >> $LOG_LOC/$SN_LOG.log
	 	   echo "****** TEST_FAILED! ****** " >> $LOG_LOC/$SN_LOG.log
		   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-FAIL.log
		   usb_log_sync
		   echo "cd $SCR_LOC; sudo sh run_main.sh" > $SCR_LOC/t.sh
                   sudo sh $SCR_LOC/t.sh
		exit 255 ;;
	esac
}

hwclock_write(){
	sudo timedatectl set-ntp no
	sudo timedatectl set-time "$1"
	sudo hwclock -w	
}

hwclock_check(){
	BT=$(sudo hwclock)
	BTC=$(sudo hwclock | cut -c 1-4)
	if [ $BTC = $1 ]; then
		echo "****** Check RTC $BT passed!, spec $1 !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check RTC $BT failed!, spec $1 !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check RTC $BT failed!, spec $1 !"
	fi
}

hwclock_check_live(){
	BT=$(sudo hwclock)
	BTC=$(sudo hwclock | cut -c 1-4)
	LIVE_YEAR=$(curl -v www.stdtime.gov.tw 2>&1 | grep Date | awk '{print $6}')
	LIVE_MONTH=$(curl -v www.stdtime.gov.tw 2>&1 | grep Date | awk '{print $5}')
	LIVE_DAY=$(curl -v www.stdtime.gov.tw 2>&1 | grep Date | awk '{print $4}')
	if [ $BTC = $LIVE_YEAR ]; then
		echo "****** Check RTC $BT passed!, spec $LIVE_YEAR !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check RTC $BT failed!, spec $LIVE_YEAR !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check RTC $BT failed!, spec $LIVE_YEAR !"
	fi
}

#1=device 2=mac_head 3=another mac_head
lan_mac_check(){
	#echo "****** LAN MAC check!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	cat "/sys/class/net/$1/address"
	if [ $? = 0 ];then
		#echo "****** Check $1 device !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		LAN=$1
	else
		#echo "****** Check enp2s0 device !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		LAN=enp2s0
	fi
	MAC=$(cat "/sys/class/net/$LAN/address")
	MAC_HEAD=$(cat "/sys/class/net/$LAN/address" | cut -c 1-8)
	if [ $MAC_HEAD = $2 ] || [ $MAC_HEAD = $3 ]; then
		echo "****** Check $LAN MAC $MAC passed!, spec $2 $3!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check $LAN MAC $MAC failed!, spec $2 $3!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check $LAN MAC $MAC failed!, spec $2 $3!"
	fi
}

lan_mac_nocheck(){
	listVar="eno1 enp1s0 enp2s0 enp3s0 enp4s0 enp5s0 enp6s0"
	echo "****** LAN MAC Record!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	for i in $listVar; do
		MAC=$(cat "/sys/class/net/$i/address")
		echo "****** Get $i MAC is $MAC! ******" | tee -a $LOG_LOC/$SN_LOG.log
	done
}

lan_down(){
	sudo ifconfig $1 down
	if [ $? = 0 ];then
		echo "****** Check $1 lan_down pass !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		sleep 1
	else
		echo "****** Check $1 lan_down fail !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check $1 lan_down fail !"
	fi
	
}

lan_ping_check(){
	sleep 1
	ping -c 1 $1
	if [ $? = 0 ];then
		echo "****** Check $1 ping pass !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check $1 ping fail !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check $1 ping fail !"
	fi
}


lan_up(){
	sudo ifconfig $1 up
	if [ $? = 0 ];then
		echo "****** Check $1 lan_up pass !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		sleep 3
	else
		echo "****** Check $1 lan_up fail !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check $1 lan_up fail !" 
	fi
}

mac_get_dialog(){
        rm -f $MAC_LOG
        dialog --title "LAN MAC Scan" --colors \
        --inputbox "\Zb\Z3Please Scan the MAC of Label:" \
        10 40 2> $MAC_LOG
	echo "" >> $MAC_LOG
	MAC_READ=$(cat $MAC_LOG)
        if [ $? = 0 ]; then
		echo "****** Scan MAC $MAC_READ for program! ******" | tee -a $LOG_LOC/$SN_LOG.log
        else
		echo "****** Scan MAC $MAC_READ fail! ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Scan MAC $MAC_READ fail!" 
                exit 1
        fi
}

mac_scan_check(){
	MAC_HEAD_CHECK=$(cat $MAC_LOG | cut -c 1-6)
	MAC_LENGTH=$(cat $MAC_LOG | wc -c)
	if [ $MAC_LENGTH = 13 ] && [ $MAC_HEAD_CHECK = "807b85" ] || [ $MAC_HEAD_CHECK = "807B85" ]; then
		echo "****** Check MAC length and head pass! ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check MAC length $MAC_LENGTH and head $MAC_HEAD_CHECK fail! ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check MAC length $MAC_LENGTH and head $MAC_HEAD_CHECK fail!" 
	fi
}

mac_nvm_write(){
	sudo $EEUPDATE_LOC/eeupdate64e $1 /D $EEUPDATE_LOC/NONIOI.BIN > $NVM_LOG
        if [ $? = 0 ]; then
		NVM_CHECK=$(cat $NVM_LOG | tail -n 1)
		echo "****** $1 $NVM_CHECK ******" | tee -a $LOG_LOC/$SN_LOG.log
        else
		NVM_CHECK=$(cat $NVM_LOG | tail -n 1)
		echo "****** $1 $NVM_CHECK fail! ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog " $1 $NVM_CHECK fail!" 
                exit 1
        fi
}
mac_addr_write(){
	#sudo $EEUPDATE_LOC/eeupdate64e $1 /A $MAC_LOG > $ADDR_LOG
	sudo $EEUPDATE_LOC/eeupdate64e $1 /D $EEUPDATE_LOC/NONIOI.BIN /A $MAC_LOG > $ADDR_LOG
        if [ $? = 0 ]; then
		ADDR_CHECK=$(cat $ADDR_LOG | tail -n 2)
		echo "****** $1 $ADDR_CHECK ******" | tee -a $LOG_LOC/$SN_LOG.log
		sleep 5
        else
		ADDR_CHECK=$(cat $ADDR_LOG | tail -n 2)
		echo "****** $1 $ADDR_CHECK fail! ******" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog " $1 $ADDR_CHECK fail!" 
                exit 1
        fi

}

mic_test(){
	dialog --title "MIC Test" --msgbox "Please check MIC connection" 10 40
	sleep 2
	clear
	arecord -d 5 -vvv -f dat /dev/null 2> $MIC_LOG
	sum=0
	i=0
	while [ $i -lt 10 ]
	do
		i=$(($i+1))
		MIC_CHECK=$(tail $MIC_LOG | awk NR==$i | cut -c 67)
		sum=$(($sum+$MIC_CHECK))
	#	echo $MIC_CHECK
	#	sleep 1
	done
	#	clear	
	#	echo $sum
	#	sleep 5

	if [ $sum -ge $1 ] ;then
		echo "****** Check MIC sum is $sum  passed!, spec $1  ******" | tee -a $LOG_LOC/$SN_LOG.log	
	else
		echo "****** Check MIC sum is $sum  failed!, spec $1  ******" | tee -a $LOG_LOC/$SN_LOG.log	
		fail_red_dialog "Check MIC sum $sum failed!, spec $1"	
	fi
}

mic_loopback_test(){
        rm $MIC_LOG
        aplay $SERIAL_LOC/Wav_868kb.wav &
        arecord -d 3 -vvv -f dat /dev/null 2> $MIC_LOG
        sum=0
        i=0
        while [ $i -lt 10 ]
        do
                i=$(($i+1))
                MIC_CHECK=$(tail $MIC_LOG | awk NR==$i | cut -c 59)
                sum=$(($sum+$MIC_CHECK))
        done

        if [ $sum -ge $1 ] ;then
                echo "- Check MIC sum is $sum  passed!, spec $1 !" | tee -a $LOG_LOC/$SN_LOG.log
        else
                echo "- Check MIC sum is $sum  failed!, spec $1 !" | tee -a $LOG_LOC/$SN_LOG.log
                fail_red_dialog "Check MIC sum $sum failed!, spec $1"
        fi
}

memory_check(){
        rm -r $MEM_LOG
        free -m | tee -a $MEM_LOG
        TCHK=$(cat $MEM_LOG | grep "Mem" | cut -c 16-19)
        if [ $TCHK -eq $1 ] || [ $TCHK -eq $2 ] ;then
                echo "- Check Memory is $TCHK  passed!, spec $1 $2 !" | tee -a $LOG_LOC/$SN_LOG.log
        else
                echo "- Check Memory is $TCHK  failed!, spec $1 $2 !" | tee -a $LOG_LOC/$SN_LOG.log
                fail_red_dialog "Check Memory $sum failed!, spec $1 $2"
        fi
}

pass_green_dialog(){
        dialog --title TESTING_RESULT --colors --yesno\
        "\Zb\Z2PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
         PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
 	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS_PASS\
	 -------------------------------------------------\
	 \ZnPower off the system (Yes/No) 
        " 20 55

        #0=yes 1=no 255=Esc
        response=$?
        case $response in
                0) 
		   #echo "" >> $LOG_LOC/$SN_LOG.log
        	   echo "****** TEST_PASSED! ****** " >> $LOG_LOC/$SN_LOG.log
        	   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-PASS.log
		   usb_log_sync
		   onedrive_log_sync
		   sync
		   poweroff
		exit 0;;
                1) 
		   #echo "" >> $LOG_LOC/$SN_LOG.log
        	   echo "****** TEST_PASSED! ****** " >> $LOG_LOC/$SN_LOG.log
        	   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-PASS.log
		   usb_log_sync
		   onedrive_log_sync
		   echo "Back to shell" 
		exit 1;;
                255) 
		   #echo "" >> $LOG_LOC/$SN_LOG.log
        	   echo "****** TEST_PASSED! ****** " >> $LOG_LOC/$SN_LOG.log
        	   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-PASS.log
		   usb_log_sync
		exit 255;;
        esac
}



warning_yellow_dialog(){
        dialog --title TESTING_RESULT --colors --yesno\
        "\Zb\Z3WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN_WARN\
	 -------------------------------------------------\
	 \ZnContinue test(Yes/No) 
        " 20 55

        #0=yes 1=no 255=Esc
        response=$?
        case $response in
                0) 
        	   echo "TEST_WARNING!" >> $LOG_LOC/$SN_LOG.log
		#exit 0;;
		;;
                1) 
        	   echo "TEST_WARNING!" >> $LOG_LOC/$SN_LOG.log
        	   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-WARN.log
		   usb_log_sync
		   onedrive_log_sync
		   echo "Back to shell" 
		exit 1;;
                255) 
        	   echo "TEST_WARNING!" >> $LOG_LOC/$SN_LOG.log
        	   mv $LOG_LOC/$SN_LOG.log $LOG_LOC/$SN_LOG-WARN.log
		   usb_log_sync
		exit 255;;
        esac
}



pci_dev_check(){
	echo " " | tee -a $LOG_LOC/$SN_LOG.log
	echo "****** PCI device check!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	lspci |grep "$1" 
	if [ $? = 0 ]; then
		echo "****** Check PCI dev $1 passed !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		lspci |grep "$1" |tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check PCI dev $1 failed !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		lspci |grep "$1" |tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check PCI dev $1 failed !"
	fi
}

rs232_loop_test(){
	COM_LOG=$TMP_LOC/com.tmp
	rm -r $COM_LOG
	(stty raw; cat > $COM_LOG )<$1 &
	PID=$! #save PID to kill cat
	echo "5555AAAA" > $1 # send command to serial port
	sleep 5s # wait for response
	kill $PID # kill cat process
	EOF
	LCHK=$(grep "5555AAAA" "$COM_LOG" )
	if [ $LCHK == "5555AAAA" ]; then
		echo "****** RS232 port $1 loopback test passed!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** RS232 port $1 loopback test failed!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "RS232 port $1 loopback test failed!" 
	fi
}

rs232_loop_test_old(){
	COM_LOG=$TMP_LOC/com.tmp
	rm -r $COM_LOG
	sudo stty -F $1 115200 raw -echo #config serial port
	sudo exec 3<$1 #redirect serial output to FD 3
	cat <&3 > $COM_LOG & #redirect serial output to file
	PID=$! #save PID to kill cat
	echo "5555AAAA" > $1 # send command to serial port
	sleep 0.5s # wait for response
	kill $PID # kill cat process
	exec 3<&- #free FD 3
	LCHK=$(grep "5555AAAA" "$COM_LOG" )
	if [ $LCHK == "5555AAAA" ]; then
		echo "****** RS232 port $1 loopback test passed!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** RS232 port $1 loopback test failed!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "****** RS232 port $1 loopback test failed!  ******" 
	fi
}

serial_loop_test(){
	sudo $SERIAL_LOC/serial-test -p $1 -b 115200 -o 1 -i 3
	if [ $? = 0 ]; then
		echo "****** Check RS232 $1 loopback passed !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check RS232 $1 loopback failed !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check RS232 loopback $1 failed !"
	fi
}

serial_check(){
	echo "****** serial device check!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	dmesg |grep serial: |grep $1 |tee -a $LOG_LOC/$SN_LOG.log
	SERIAL=$(dmesg |grep serial: |grep $1 |awk '{print $4}')
	if [ $SERIAL = $1 ] ; then
		echo "****** Check serial $SERIAL passed!, spec $1!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check serial $SERIAL failed!, spec $1!  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "****** Check serial $SERIAL failed!, spec $1!  ******"
	fi
}

sn_get(){
	#---Get SN---
	SN_TMP=$TMP_LOC/sn.tmp
#	rm -f $SN_TMP
 	MODEL=$0
	read -p "Please input SN: " SN 
	SN_LOG=$SN-$MODEL-$(date '+%Y%m%d%H%M%S')
	#echo $SN-$MODEL-$(date '+%Y%m%d%H%M%S') > $SN_TMP #log with date
	##echo $SN-$MODEL-$(date '+%H%M%S')  > $SN_TMP #log without date
	#SN_LOG=$(<$SN_TMP)
	echo Model: $0 >> $LOG_LOC/$SN_LOG.log
	#cat $TMP_LOC/model.tmp >> $LOG_LOC/$SN_LOG.log   
	echo Serial Number: $SN >> $LOG_LOC/$SN_LOG.log	
}

sn_get_dialog(){
	SN_TMP=$TMP_LOC/sn.tmp
#	rm -f $SN_TMP
 	MODEL=$0
	dialog --title "$MODEL Test" \
	--inputbox "Cancel=Back to MAIN-MENU \nPlease Scan the SN of Label:" \
	10 40 2> $SN_TMP
	if [ $? = 0 ]; then
		SN_LOG=$(cat $SN_TMP)-$MODEL-$(date '+%Y%m%d%H%M%S')
		echo Test Model: $0 >> $LOG_LOC/$SN_LOG.log
		echo Serial Number: $(cat $SN_TMP) >> $LOG_LOC/$SN_LOG.log	
		echo Test Start: $(date '+%Y%m%d%H%M%S') >> $LOG_LOC/$SN_LOG.log	
	else 
		echo "cd $SCR_LOC; sudo sh run_main.sh" > $SCR_LOC/t.sh
                sudo sh $SCR_LOC/t.sh
		exit 1
	fi		
}

sn_get_nodate_dialog(){
	SN_TMP=$TMP_LOC/sn.tmp
 	MODEL=$0
	dialog --title "$MODEL Test" \
	--inputbox "Cancel=Back to MAIN-MENU \nPlease Scan the SN of Label:" \
	10 40 2> $SN_TMP
	if [ $? = 0 ]; then
		SN_LOG=$(cat $SN_TMP)-$MODEL-$(date '+%H%M%S')
		echo Test Model: $0 >> $LOG_LOC/$SN_LOG.log
		echo Serial Number: $(cat $SN_TMP) >> $LOG_LOC/$SN_LOG.log	
		echo Test Start: $(date '+%H%M%S') >> $LOG_LOC/$SN_LOG.log	
	else 
		echo "cd $SCR_LOC; sudo sh run_main.sh" > $SCR_LOC/t.sh
                sudo sh $SCR_LOC/t.sh
		exit 1
	fi		
}

usb_dev_check (){
	echo " " | tee -a $LOG_LOC/$SN_LOG.log
	echo "****** USB device check!  ******" | tee -a $LOG_LOC/$SN_LOG.log
#	USB_dev=$(lsusb |grep "$1" |awk '{print $4}')
	lsusb | grep "$1" 
	if [ $? = 0 ]; then
		echo "****** Check USB dev $1 passed !  ******" | tee -a $LOG_LOC/$SN_LOG.log
		lsusb |grep "$1" |tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check USB dev $1 failed !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		lsusb |grep "$1" |tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check USB dev $1 failed !"
	fi
}

usb_dev_count (){
	count=$(lsusb | grep "$1" |wc -l)
	if [ $count = $2 ] || [ $count = $3 ] ; then
		echo "****** Check USB device count $1 X $count passed! spec $2 $3! ******" | tee -a $LOG_LOC/$SN_LOG.log

		#lsusb |grep "$1" |tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check USB device count $1 X $count failed! spec $2 $3! ******" | tee -a $LOG_LOC/$SN_LOG.log 
		lsusb |grep "$1" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check USB dev count $1 X $count failed! spec $2 $3!"
	fi
}

usb_id_check (){
	echo "****** USB ID check!  ******" | tee -a $LOG_LOC/$SN_LOG.log
	USB_ID=$(lsusb |grep $1 |awk '{print $6}')
	lsusb |grep $1 |tee -a $LOG_LOC/$SN_LOG.log
	
	if [ $USB_ID = $1 ]; then
		echo "****** Check USB ID $1 passed !  ******" | tee -a $LOG_LOC/$SN_LOG.log
	else
		echo "****** Check USB ID $1 failed !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check USB ID $1 failed !" 
	fi
}

#1=device 2=speed 
ssd_speed_check (){
	sudo hdparm -t $1 > $USB30_LOC
	SSD_SPEED=$(cat $USB30_LOC | grep sec | awk '{print $5}')
	SSD_DEV=$(lsblk | grep $1 | awk '{print $7}')	
	if [ $SSD_SPEED -ge $2 ] ; then
	        echo "****** Check $SSD_DEV speed $SSD_SPEED passed!, spec $2 ! *****" | tee -a $LOG_LOC/$SN_LOG.log
	else
                echo "****** Check $SSD_DEV speed $SSD_SPEED failed!, spec $2 ! *****" | tee -a $LOG_LOC/$SN_LOG.log
		fail_red_dialog "Check $SSD_DEV speed $SSD_SPEED failed!, spec $2 !" 
	fi
}

time_zone_set() {
	sudo cp /usr/share/zoneinfo/$1 /etc/localtime
}

time_ntp_set(){
	ping ntp.ubuntu.com -c 1
	if [ $? = 0 ]; then
		echo "****** Check ping ntp passed !  ******" | tee -a $LOG_LOC/$SN_LOG.log

	else
		echo "****** Check ping ntp failed !  ******" | tee -a $LOG_LOC/$SN_LOG.log 
		fail_red_dialog "Check ping ntp failed !"
	fi
	timedatectl set-ntp yes
	timedatectl
	sleep 1
	sudo hwclock -w
}

usb_log_sync(){
	sudo rsync -avh /home/production/u7_log/ /media/production/USB30/u7_log/
}


onedrive_log_sync(){
	sudo rclone copy /home/production/u7_log onedrive:General/u7_log -P
}

onedrive_to_local(){
	#sudo rclone copy onedrive:General/u7_log /home/production/u7_log -P
	sudo rclone sync onedrive:General/u7_log /home/production/u7_log -P
}





